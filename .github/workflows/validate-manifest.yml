name: Validate Manifest

on:
  pull_request:
    paths:
      - 'v2/manifest/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  validate-manifest:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Validate v2 manifest structure
        run: |
          cat > /tmp/manifest_schema.json << 'EOF'
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": ["network", "nodes"],
            "properties": {
              "network": {
                "type": "object",
                "required": ["name", "version", "domain", "vpn_network"],
                "properties": {
                  "name": { "type": "string" },
                  "version": { "type": "string" },
                  "domain": { "type": "string" },
                  "vpn_network": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$" }
                }
              },
              "introducer_nodes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["name", "internal_ip", "status"],
                  "properties": {
                    "name": { "type": "string" },
                    "internal_ip": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$" },
                    "public_ip": { "type": "string" },
                    "gpg_key_id": { "type": "string" },
                    "region": { "type": "string" },
                    "status": { "type": "string", "enum": ["active", "pending", "inactive"] }
                  }
                }
              },
              "nodes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["name", "internal_ip", "status"],
                  "properties": {
                    "name": { "type": "string" },
                    "internal_ip": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$" },
                    "public_ip": { "type": "string" },
                    "gpg_key_id": { "type": "string" },
                    "region": { "type": "string" },
                    "status": { "type": "string", "enum": ["active", "pending", "inactive"] },
                    "storage_contribution": { "type": "string" },
                    "storage_allocation": { "type": "string" },
                    "is_publicly_accessible": { "type": "boolean" }
                  }
                }
              }
            }
          }
          EOF
          
          python -c '
          import yaml
          import json
          import jsonschema
          import sys
          
          # Load schema
          with open("/tmp/manifest_schema.json", "r") as f:
              schema = json.load(f)
          
          # Load manifest
          try:
              with open("v2/manifest/manifest.yaml", "r") as f:
                  manifest = yaml.safe_load(f)
              
              # Validate against schema
              jsonschema.validate(instance=manifest, schema=schema)
              
              # Additional checks
              node_names = set()
              node_ips = set()
              
              # Check for duplicates in nodes
              for node in manifest.get("nodes", []):
                  name = node.get("name")
                  ip = node.get("internal_ip")
                  
                  if name in node_names:
                      print(f"Error: Duplicate node name: {name}")
                      sys.exit(1)
                  
                  if ip in node_ips:
                      print(f"Error: Duplicate IP address: {ip}")
                      sys.exit(1)
                  
                  node_names.add(name)
                  node_ips.add(ip)
              
              # Check for duplicates in introducer nodes
              for node in manifest.get("introducer_nodes", []):
                  name = node.get("name")
                  ip = node.get("internal_ip")
                  
                  if name in node_names:
                      print(f"Error: Duplicate node name: {name}")
                      sys.exit(1)
                  
                  if ip in node_ips:
                      print(f"Error: Duplicate IP address: {ip}")
                      sys.exit(1)
                  
                  node_names.add(name)
                  node_ips.add(ip)
              
              print("Manifest validation successful!")
              sys.exit(0)
              
          except FileNotFoundError:
              print("Warning: v2/manifest/manifest.yaml not found.")
              sys.exit(0)  # Not an error, file might not exist in all PRs
          except Exception as e:
              print(f"Error validating manifest: {e}")
              sys.exit(1)
          '

