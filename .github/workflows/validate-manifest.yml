name: Validate Manifest

on:
  pull_request:
    paths:
      - 'v2/manifest/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  validate-manifest:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Validate v2 manifest structure
        run: |
          cat > /tmp/manifest_schema.json << 'EOF'
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": ["network", "nodes"],
            "properties": {
              "network": {
                "type": "object",
                "required": ["name", "version", "domain", "vpn_network"],
                "properties": {
                  "name": { "type": "string" },
                  "version": { "type": "string" },
                  "domain": { "type": "string" },
                  "vpn_network": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$" },
                  "tahoe": {
                    "type": "object",
                    "required": ["shares_needed", "shares_happy", "shares_total", "reserved_space"],
                    "properties": {
                      "shares_needed": { "type": "integer", "minimum": 1 },
                      "shares_happy": { "type": "integer", "minimum": 1 },
                      "shares_total": { "type": "integer", "minimum": 1 },
                      "reserved_space": { "type": "string", "pattern": "^[0-9]+(K|M|G|T)?$" }
                    }
                  }
                }
              },
              "introducer_furl": {
                "type": ["string", "null"]
              },
              "introducer_nodes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["name", "internal_ip", "status"],
                  "properties": {
                    "name": { "type": "string" },
                    "internal_ip": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$" },
                    "vpn_ip": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$" },
                    "public_ip": { "type": "string" },
                    "gpg_key_id": { "type": "string" },
                    "region": { "type": "string" },
                    "status": { "type": "string", "enum": ["active", "pending", "inactive"] }
                  }
                }
              },
              "nodes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["name", "internal_ip", "status"],
                  "properties": {
                    "name": { "type": "string" },
                    "internal_ip": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$" },
                    "vpn_ip": { "type": "string", "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$" },
                    "public_ip": { "type": "string" },
                    "gpg_key_id": { "type": "string" },
                    "region": { "type": "string" },
                    "status": { "type": "string", "enum": ["active", "pending", "inactive"] },
                    "storage_contribution": { "type": "string" },
                    "storage_allocation": { "type": "string" },
                    "is_publicly_accessible": { "type": "boolean" },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["tinc_vpn", "tahoe_introducer", "tahoe_storage", "tahoe_client"]
                      }
                    },
                    "ports": {
                      "type": "object",
                      "properties": {
                        "tinc": { "type": "integer" },
                        "tahoe_storage": { "type": "integer" },
                        "tahoe_client": { "type": "integer" },
                        "tahoe_introducer": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          }
          EOF
          
          python -c '
          import yaml
          import json
          import jsonschema
          import sys
          
          # Load schema
          with open("/tmp/manifest_schema.json", "r") as f:
              schema = json.load(f)
          
          # Load manifest
          try:
              with open("v2/manifest/manifest.yaml", "r") as f:
                  manifest = yaml.safe_load(f)
              
              # Validate against schema
              jsonschema.validate(instance=manifest, schema=schema)
              
              # Additional checks
              node_names = set()
              node_ips = set()
              tahoe_introducers = 0
              
              # Check for duplicates in nodes
              for node in manifest.get("nodes", []):
                  name = node.get("name")
                  ip = node.get("internal_ip")
                  vpn_ip = node.get("vpn_ip", ip)  # Default to internal_ip if vpn_ip not specified
                  roles = node.get("roles", [])
                  
                  if name in node_names:
                      print(f"Error: Duplicate node name: {name}")
                      sys.exit(1)
                  
                  if ip in node_ips:
                      print(f"Error: Duplicate IP address: {ip}")
                      sys.exit(1)
                  
                  # Count tahoe introducers
                  if "tahoe_introducer" in roles:
                      tahoe_introducers += 1
                  
                  # Check that roles and ports are consistent
                  if "ports" in node:
                      ports = node["ports"]
                      for role, expected_port in [
                          ("tinc_vpn", "tinc"), 
                          ("tahoe_storage", "tahoe_storage"),
                          ("tahoe_client", "tahoe_client"),
                          ("tahoe_introducer", "tahoe_introducer")
                      ]:
                          if role in roles and expected_port not in ports:
                              print(f"Error: Node {name} has role {role} but no {expected_port} port defined")
                              sys.exit(1)
                  
                  node_names.add(name)
                  node_ips.add(ip)
                  if vpn_ip != ip:
                      node_ips.add(vpn_ip)
              
              # Check for duplicates in introducer nodes
              for node in manifest.get("introducer_nodes", []):
                  name = node.get("name")
                  ip = node.get("internal_ip")
                  vpn_ip = node.get("vpn_ip", ip)  # Default to internal_ip if vpn_ip not specified
                  
                  if name in node_names:
                      print(f"Error: Duplicate node name: {name}")
                      sys.exit(1)
                  
                  if ip in node_ips:
                      print(f"Error: Duplicate IP address: {ip}")
                      sys.exit(1)
                  
                  node_names.add(name)
                  node_ips.add(ip)
                  if vpn_ip != ip:
                      node_ips.add(vpn_ip)
                  
                  # Count as an introducer
                  tahoe_introducers += 1
              
              # Validate Tahoe-LAFS configuration
              if "network" in manifest and "tahoe" in manifest["network"]:
                  tahoe_config = manifest["network"]["tahoe"]
                  
                  # Check that the erasure coding parameters make sense
                  shares_needed = tahoe_config.get("shares_needed", 0)
                  shares_happy = tahoe_config.get("shares_happy", 0)
                  shares_total = tahoe_config.get("shares_total", 0)
                  
                  if not (1 <= shares_needed <= shares_happy <= shares_total):
                      print(f"Error: Invalid Tahoe-LAFS shares configuration: needed={shares_needed}, happy={shares_happy}, total={shares_total}")
                      print("Must satisfy: 1 <= shares_needed <= shares_happy <= shares_total")
                      sys.exit(1)
              
              # Check introducer configuration
              if tahoe_introducers > 1:
                  print(f"Warning: Found {tahoe_introducers} introducer nodes. While multiple introducers are possible, it's recommended to have only one active introducer.")
              
              # Check introducer_furl
              introducer_furl = manifest.get("introducer_furl")
              if tahoe_introducers > 0 and not introducer_furl and introducer_furl is not None:
                  print("Warning: There are introducer nodes but no introducer_furl is set. This is expected during initial setup.")
              
              # Check that we have enough nodes for the "happy" parameter
              if "network" in manifest and "tahoe" in manifest["network"]:
                  shares_happy = manifest["network"]["tahoe"].get("shares_happy", 0)
                  storage_nodes = sum(1 for node in manifest.get("nodes", []) if "tahoe_storage" in node.get("roles", []))
                  
                  if storage_nodes < shares_happy:
                      print(f"Warning: Not enough storage nodes ({storage_nodes}) to satisfy shares_happy parameter ({shares_happy}).")
              
              print("Manifest validation successful!")
              sys.exit(0)
              
          except FileNotFoundError:
              print("Warning: v2/manifest/manifest.yaml not found.")
              sys.exit(0)  # Not an error, file might not exist in all PRs
          except Exception as e:
              print(f"Error validating manifest: {e}")
              sys.exit(1)
          '

