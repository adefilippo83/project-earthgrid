name: Test Earthgrid Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'v2/Docker/**'
      - '.github/workflows/test-earthgrid-containers.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'v2/Docker/**'
      - '.github/workflows/test-earthgrid-containers.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint-shell-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run ShellCheck for Tinc scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './v2/Docker/earthgrid-tinc/scripts'
          severity: warning

      - name: Run ShellCheck for Tahoe Introducer scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './v2/Docker/earthgrid-tahoe-introducer/scripts'
          severity: warning

      - name: Run ShellCheck for Tahoe Storage scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './v2/Docker/earthgrid-tahoe-storage/scripts'
          severity: warning

      - name: Run ShellCheck for Tahoe Client scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './v2/Docker/earthgrid-tahoe-client/scripts'
          severity: warning

      - name: Run ShellCheck for Integration scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './v2/Docker/earthgrid-integration/scripts'
          severity: warning

  build-containers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Tinc container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tinc
          load: true
          tags: earthgrid/tinc:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Tahoe Introducer container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-introducer
          load: true
          tags: earthgrid/tahoe-introducer:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Tahoe Storage container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-storage
          load: true
          tags: earthgrid/tahoe-storage:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Tahoe Client container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-client
          load: true
          tags: earthgrid/tahoe-client:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare integration scripts
        run: |
          # Copy integration scripts to a temp dir for containerization
          mkdir -p /tmp/earthgrid-integration
          cp -r ./v2/Docker/earthgrid-integration/scripts /tmp/earthgrid-integration/
          
          # Create a simple Dockerfile
          cat > /tmp/earthgrid-integration/Dockerfile << EOF
          FROM alpine:3.17
          
          RUN apk add --no-cache bash curl jq iproute2 git gnupg
          
          COPY scripts /usr/local/bin/
          RUN chmod +x /usr/local/bin/*.sh
          
          CMD ["/bin/bash"]
          EOF

      - name: Build Integration container
        uses: docker/build-push-action@v4
        with:
          context: /tmp/earthgrid-integration
          load: true
          tags: earthgrid/integration:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-tinc-container:
    runs-on: ubuntu-latest
    needs: build-containers
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Tinc container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tinc
          load: true
          tags: earthgrid/tinc:test
          cache-from: type=gha

      - name: Create test GPG key
        run: |
          # Create a batch file for GPG key generation
          cat > /tmp/gpg-gen.batch << EOF
          Key-Type: RSA
          Key-Length: 2048
          Name-Real: Test Node
          Name-Email: test@example.com
          Expire-Date: 0
          %no-protection
          %commit
          EOF
          
          # Generate the key
          gpg --batch --generate-key /tmp/gpg-gen.batch
          
          # Export the key ID
          GPG_KEY_ID=$(gpg --list-keys --with-colons test@example.com | grep -m 1 "^pub" | cut -d: -f5)
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          
          # Export the private key for the container
          mkdir -p ./v2/Docker/secrets
          gpg --armor --export-secret-keys $GPG_KEY_ID > ./v2/Docker/secrets/gpg_private_key.asc
          chmod 600 ./v2/Docker/secrets/gpg_private_key.asc

      - name: Setup test manifest
        run: |
          # Create directories
          mkdir -p ./v2/Docker/data/manifest-repo

          # Initialize a git repo in the manifest directory
          cd ./v2/Docker/data/manifest-repo
          git init
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"
          mkdir -p manifest
          
          # Add the repo as a remote to simulate the GitHub repo
          git remote add origin https://github.com/test/repo.git
          
          # Create a .gitignore file
          echo "*.log" > .gitignore
          
          # Create a simple test manifest
          cat > ./manifest/manifest.yaml << EOF
          ---
          network:
            name: earthgrid-test
            version: 2.0.0
            domain: test.grid.earth
            vpn_network: 10.200.0.0/16
            tahoe:
              shares_needed: 3
              shares_happy: 7
              shares_total: 10
              reserved_space: 50G
          
          introducer_furl: null
          
          nodes:
            - name: test-node
              internal_ip: 10.200.1.1
              public_ip: auto
              gpg_key_id: ${{ env.GPG_KEY_ID }}
              region: test-region
              status: active
              storage_contribution: 10GB
              storage_allocation: 3GB
              is_publicly_accessible: true
              roles:
                - tinc_vpn
                - tahoe_storage
                - tahoe_client
                - tahoe_introducer
              ports:
                tinc: 655
                tahoe_storage: 3457
                tahoe_client: 3456
                tahoe_introducer: 3458
          EOF

          # Commit the manifest file
          git add manifest .gitignore
          git commit -m "Initial commit with test manifest"

      - name: Run container in test mode
        run: |
          # Create test environment file
          cat > ./v2/Docker/.env.test << EOF
          NODE_NAME=test-node
          INTERNAL_VPN_IP=10.200.1.1
          PUBLIC_IP=127.0.0.1
          GPG_KEY_ID=${{ env.GPG_KEY_ID }}
          GITHUB_REPO=test/repo
          GITHUB_BRANCH=main
          MANIFEST_FILENAME=manifest.yaml
          ENABLE_AUTO_DISCOVERY=false
          TEST_MODE=true
          GIT_MOCK=true
          CONTAINER_TYPE=tinc
          EOF
          
          # Create local directories
          mkdir -p ./v2/Docker/data/tinc ./v2/Docker/data/gnupg ./v2/Docker/data/logs ./v2/Docker/data/manifest
          
          # Prepare docker command
          echo "#!/bin/bash" > ./setup-test.sh
          echo "set -e" >> ./setup-test.sh
          
          echo "# Fix GPG ownership issue" >> ./setup-test.sh
          echo "mkdir -p /root/.gnupg" >> ./setup-test.sh
          echo "chmod -R 700 /root/.gnupg" >> ./setup-test.sh
          echo "chown -R root:root /root/.gnupg" >> ./setup-test.sh
          
          echo "# Import GPG key" >> ./setup-test.sh
          echo "gpg --batch --import /run/secrets/gpg_private_key" >> ./setup-test.sh
          
          echo "# Prepare Git for dubious ownership" >> ./setup-test.sh
          echo "git config --global --add safe.directory /var/lib/earthgrid/manifest-repo" >> ./setup-test.sh
          echo "git config --global --add safe.directory '*'" >> ./setup-test.sh
          
          echo "# Run setup scripts" >> ./setup-test.sh
          echo "chmod +x /app/scripts/*.sh" >> ./setup-test.sh
          echo "/app/scripts/setup-tinc.sh" >> ./setup-test.sh
          echo "/app/scripts/sync-manifest.sh" >> ./setup-test.sh
          
          echo "# Ensure manifest exists for validation" >> ./setup-test.sh
          echo "mkdir -p /var/lib/earthgrid/manifest" >> ./setup-test.sh
          echo "if [ ! -f \"/var/lib/earthgrid/manifest/manifest.yaml\" ]; then" >> ./setup-test.sh
          echo "  echo 'Creating test manifest file...'" >> ./setup-test.sh
          echo "  cat > /var/lib/earthgrid/manifest/manifest.yaml << EOFMANIFEST" >> ./setup-test.sh
          echo "---" >> ./setup-test.sh
          echo "network:" >> ./setup-test.sh
          echo "  name: earthgrid-test" >> ./setup-test.sh
          echo "  version: 2.0.0" >> ./setup-test.sh
          echo "  domain: test.grid.earth" >> ./setup-test.sh
          echo "  vpn_network: 10.200.0.0/16" >> ./setup-test.sh
          echo "" >> ./setup-test.sh
          echo "nodes:" >> ./setup-test.sh
          echo "  - name: test-node" >> ./setup-test.sh
          echo "    internal_ip: 10.200.1.1" >> ./setup-test.sh
          echo "    public_ip: 127.0.0.1" >> ./setup-test.sh
          echo "    gpg_key_id: \$GPG_KEY_ID" >> ./setup-test.sh
          echo "    region: test-region" >> ./setup-test.sh
          echo "    status: active" >> ./setup-test.sh
          echo "    storage_contribution: 10GB" >> ./setup-test.sh
          echo "    storage_allocation: 3GB" >> ./setup-test.sh
          echo "    is_publicly_accessible: true" >> ./setup-test.sh
          echo "EOFMANIFEST" >> ./setup-test.sh
          echo "fi" >> ./setup-test.sh
          
          echo "echo 'Test completed successfully!'" >> ./setup-test.sh
          chmod +x ./setup-test.sh
          
          # Run container in test mode with simplified entrypoint
          docker run --name earthgrid-tinc-test --cap-add=NET_ADMIN \
            --env-file ./v2/Docker/.env.test \
            -v $(pwd)/v2/Docker/data/tinc:/etc/tinc \
            -v $(pwd)/v2/Docker/data/gnupg:/root/.gnupg \
            -v $(pwd)/v2/Docker/data/logs:/var/log/earthgrid \
            -v $(pwd)/v2/Docker/data/manifest-repo:/var/lib/earthgrid/manifest-repo \
            -v $(pwd)/v2/Docker/data/manifest:/var/lib/earthgrid/manifest \
            -v $(pwd)/v2/Docker/secrets/gpg_private_key.asc:/run/secrets/gpg_private_key \
            -v $(pwd)/setup-test.sh:/setup-test.sh \
            --entrypoint /bin/bash \
            earthgrid/tinc:test \
            -c "/setup-test.sh"
          
          # Verify that key files were created
          docker cp earthgrid-tinc-test:/etc/tinc/earthgrid/tinc.conf ./tinc.conf
          docker cp earthgrid-tinc-test:/etc/tinc/earthgrid/hosts/test-node ./test-node-host
          
          echo "--- tinc.conf ---"
          cat ./tinc.conf
          
          echo "--- test-node host file ---"
          cat ./test-node-host
          
          if ! grep -q "Name = test-node" ./tinc.conf; then
            echo "Error: tinc.conf does not contain correct node name"
            exit 1
          fi
          
          if ! grep -q "Subnet = 10.200.1.1/32" ./test-node-host; then
            echo "Error: Host file does not contain correct subnet"
            exit 1
          fi
          
          echo "Container tests passed successfully!"

      - name: Cleanup Tinc Test
        if: always()
        run: |
          # Stop and remove the container
          docker rm -f earthgrid-tinc-test || true
          
          # Create a cleanup script to deal with permission issues
          cat > ./cleanup.sh << EOF
          #!/bin/bash
          set -e
          
          # Use a temporary container to fix permissions and clean up
          docker run --rm -v $(pwd)/v2/Docker/data:/data -v $(pwd)/v2/Docker/secrets:/secrets \
            --entrypoint /bin/bash \
            alpine:latest \
            -c "rm -rf /data/tinc /data/gnupg /data/logs /data/manifest-repo /data/manifest /secrets"
          EOF
          chmod +x ./cleanup.sh
          
          # Run the cleanup script
          ./cleanup.sh || true
          
          # Remove remaining files
          rm -f ./v2/Docker/.env.test ./tinc.conf ./test-node-host ./cleanup.sh ./setup-test.sh

  test-integration-scripts:
    runs-on: ubuntu-latest
    needs: build-containers
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare integration scripts
        run: |
          # Copy integration scripts to a temp dir for containerization
          mkdir -p /tmp/earthgrid-integration
          cp -r ./v2/Docker/earthgrid-integration/scripts /tmp/earthgrid-integration/
          
          # Create a simple Dockerfile
          cat > /tmp/earthgrid-integration/Dockerfile << EOF
          FROM alpine:3.17
          
          RUN apk add --no-cache bash curl jq iproute2 git gnupg
          
          COPY scripts /usr/local/bin/
          RUN chmod +x /usr/local/bin/*.sh
          
          CMD ["/bin/bash"]
          EOF

      - name: Build Integration container
        uses: docker/build-push-action@v4
        with:
          context: /tmp/earthgrid-integration
          load: true
          tags: earthgrid/integration:test
          cache-from: type=gha

      - name: Setup test environment
        run: |
          # Create directories
          mkdir -p ./v2/Docker/data/test-integration/{manifest,logs,config}
          
          # Create test manifest file
          cat > ./v2/Docker/data/test-integration/manifest/manifest.yaml << EOF
          ---
          network:
            name: earthgrid-test
            version: 2.0.0
            domain: test.grid.earth
            vpn_network: 10.200.0.0/16
            tahoe:
              shares_needed: 3
              shares_happy: 7
              shares_total: 10
              reserved_space: 50G
          
          introducer_furl: pb://abc123@10.200.1.1:3458/introducer
          
          nodes:
            - name: test-node1
              internal_ip: 10.200.1.1
              vpn_ip: 10.200.1.1
              public_ip: 192.168.1.100
              status: active
              roles:
                - tinc_vpn
                - tahoe_introducer
                - tahoe_storage
            - name: test-node2
              internal_ip: 10.200.1.2
              vpn_ip: 10.200.1.2
              public_ip: 192.168.1.101
              status: active
              roles:
                - tinc_vpn
                - tahoe_storage
                - tahoe_client
          EOF
          
          # Create VPN status file
          mkdir -p ./v2/Docker/data/test-integration/config/earthgrid
          echo "VPN_READY=true" > ./v2/Docker/data/test-integration/config/vpn_status

      - name: Test validate-vpn-network script
        run: |
          docker run --name test-validate-vpn \
            -v $(pwd)/v2/Docker/data/test-integration:/var/lib/earthgrid \
            -v $(pwd)/v2/Docker/data/test-integration/logs:/var/log/earthgrid \
            -e DEBUG=true \
            -e MANIFEST_DIR=/var/lib/earthgrid/manifest \
            -e NODE_NAME=test-node1 \
            earthgrid/integration:test \
            /usr/local/bin/validate-vpn-network.sh
          
          # Check the log file to verify it ran correctly
          mkdir -p ./test-logs
          docker cp test-validate-vpn:/var/log/earthgrid/vpn-validation.log ./test-logs/
          cat ./test-logs/vpn-validation.log
          
          # Cleanup
          docker rm -f test-validate-vpn || true

      - name: Test resolve-node-ips script
        run: |
          docker run --name test-resolve-ips \
            -v $(pwd)/v2/Docker/data/test-integration:/var/lib/earthgrid \
            -v $(pwd)/v2/Docker/data/test-integration/logs:/var/log/earthgrid \
            -e DEBUG=true \
            -e MANIFEST_DIR=/var/lib/earthgrid/manifest \
            -e NODE_NAME=test-node1 \
            earthgrid/integration:test \
            /usr/local/bin/resolve-node-ips.sh
          
          # Check that the resolution file was created
          mkdir -p ./test-logs
          docker cp test-resolve-ips:/var/lib/earthgrid/node_resolution.txt ./test-logs/
          cat ./test-logs/node_resolution.txt
          
          # Test IP resolution functionality
          docker run --rm \
            -v $(pwd)/v2/Docker/data/test-integration:/var/lib/earthgrid \
            -e NODE_NAME=test-node1 \
            -e MANIFEST_DIR=/var/lib/earthgrid/manifest \
            earthgrid/integration:test \
            /usr/local/bin/resolve-node-ips.sh resolve test-node2
          
          # Cleanup
          docker rm -f test-resolve-ips || true

  test-tahoe-containers:
    runs-on: ubuntu-latest
    needs: build-containers
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Tahoe Introducer container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-introducer
          load: true
          tags: earthgrid/tahoe-introducer:test
          cache-from: type=gha

      - name: Build Tahoe Storage container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-storage
          load: true
          tags: earthgrid/tahoe-storage:test
          cache-from: type=gha

      - name: Build Tahoe Client container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-client
          load: true
          tags: earthgrid/tahoe-client:test
          cache-from: type=gha

      - name: Prepare test environment
        run: |
          # Create the necessary directories for Tahoe testing
          mkdir -p ./v2/Docker/data/test-tahoe/{manifest,logs,tahoe-introducer,tahoe-storage,tahoe-client}
          
          # Set up VPN status for testing
          mkdir -p ./v2/Docker/data/test-tahoe/network-config
          echo "VPN_READY=true" > ./v2/Docker/data/test-tahoe/vpn_status
          touch ./v2/Docker/data/test-tahoe/network-config/network_configured
          
          # Create test manifest file
          cat > ./v2/Docker/data/test-tahoe/manifest/manifest.yaml << EOF
          ---
          network:
            name: earthgrid-test
            version: 2.0.0
            domain: test.grid.earth
            vpn_network: 10.200.0.0/16
            tahoe:
              shares_needed: 3
              shares_happy: 7
              shares_total: 10
              reserved_space: 50G
          
          introducer_furl: null
          
          nodes:
            - name: test-node1
              internal_ip: 10.200.1.1
              vpn_ip: 10.200.1.1
              public_ip: 192.168.1.100
              status: active
              roles:
                - tinc_vpn
                - tahoe_introducer
                - tahoe_storage
            - name: test-node2
              internal_ip: 10.200.1.2
              vpn_ip: 10.200.1.2
              public_ip: 192.168.1.101
              status: active
              roles:
                - tinc_vpn
                - tahoe_storage
                - tahoe_client
          EOF

      - name: Test Tahoe Introducer container setup script
        run: |
          # Run the container and execute the setup script
          docker run --name tahoe-introducer-test \
            -v $(pwd)/v2/Docker/data/test-tahoe/tahoe-introducer:/var/lib/tahoe-introducer \
            -v $(pwd)/v2/Docker/data/test-tahoe/logs:/var/log/earthgrid \
            -v $(pwd)/v2/Docker/data/test-tahoe/manifest:/var/lib/earthgrid/manifest \
            -v $(pwd)/v2/Docker/data/test-tahoe/network-config:/var/lib/earthgrid/network-config \
            -e NODE_NAME=test-node1 \
            -e NICKNAME=test-introducer \
            -e INTRODUCER_PORT=3458 \
            earthgrid/tahoe-introducer:test \
            /usr/local/bin/setup-introducer.sh
          
          # Verify that config was created
          docker cp tahoe-introducer-test:/var/lib/tahoe-introducer/tahoe.cfg ./tahoe-introducer.cfg
          cat ./tahoe-introducer.cfg
          
          # Check that tahoe.cfg was created and has correct values
          if ! grep -q "nickname = test-introducer" ./tahoe-introducer.cfg; then
            echo "Error: tahoe.cfg does not contain correct nickname"
            exit 1
          fi
          
          if ! grep -q "tub.port = 3458" ./tahoe-introducer.cfg; then
            echo "Error: tahoe.cfg does not contain correct port"
            exit 1
          fi
          
          # Cleanup
          docker rm -f tahoe-introducer-test || true
          rm -f ./tahoe-introducer.cfg

      - name: Test Tahoe FURL synchronization
        run: |
          # Create a test FURL file
          mkdir -p ./v2/Docker/data/test-tahoe/tahoe-introducer/private
          echo "pb://abc123@10.200.1.1:3458/introducer" > ./v2/Docker/data/test-tahoe/tahoe-introducer/private/introducer.furl
          
          # Run the FURL sync script
          docker run --name tahoe-furl-sync-test \
            -v $(pwd)/v2/Docker/data/test-tahoe/tahoe-introducer:/var/lib/tahoe-introducer \
            -v $(pwd)/v2/Docker/data/test-tahoe/logs:/var/log/earthgrid \
            -v $(pwd)/v2/Docker/data/test-tahoe/manifest:/var/lib/earthgrid/manifest \
            -e NODE_NAME=test-node1 \
            -e MANIFEST_DIR=/var/lib/earthgrid/manifest \
            -e DEBUG=true \
            earthgrid/integration:test \
            /usr/local/bin/sync-introducer-furl.sh
          
          # Verify that the FURL was added to the manifest
          docker cp tahoe-furl-sync-test:/var/lib/earthgrid/manifest/manifest.yaml ./updated-manifest.yaml
          cat ./updated-manifest.yaml
          
          if ! grep -q "introducer_furl: pb://abc123@10.200.1.1:3458/introducer" ./updated-manifest.yaml; then
            echo "Error: FURL was not updated in manifest"
            exit 1
          fi
          
          # Cleanup
          docker rm -f tahoe-furl-sync-test || true
          rm -f ./updated-manifest.yaml

      - name: Cleanup
        if: always()
        run: |
          # Remove test directories
          rm -rf ./v2/Docker/data/test-tahoe ./v2/Docker/data/test-integration ./test-logs