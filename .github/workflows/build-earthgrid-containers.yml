name: Build and Push Earthgrid Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'v2/Docker/**'
      - '.github/workflows/build-earthgrid-containers.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'v2/Docker/**'
      - '.github/workflows/build-earthgrid-containers.yml'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  packages: write

jobs:
  build-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare integration scripts
        run: |
          # Copy integration scripts to a temp dir for containerization
          mkdir -p /tmp/earthgrid-integration
          cp -r ./v2/Docker/earthgrid-integration/scripts /tmp/earthgrid-integration/
          
          # Create a simple Dockerfile
          cat > /tmp/earthgrid-integration/Dockerfile << EOF
          FROM alpine:3.17
          
          RUN apk add --no-cache bash curl jq iproute2 git gnupg
          
          COPY scripts /usr/local/bin/
          RUN chmod +x /usr/local/bin/*.sh
          
          LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          LABEL org.opencontainers.image.description="EarthGrid Network Integration Scripts"
          
          CMD ["/bin/bash"]
          EOF

      - name: Extract metadata for integration
        id: meta-integration
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/earthgrid-integration
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            latest

      - name: Build and push integration container
        uses: docker/build-push-action@v4
        with:
          context: /tmp/earthgrid-integration
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-integration.outputs.tags }}
          labels: ${{ steps.meta-integration.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-tinc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/earthgrid-tinc
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            latest

      - name: Build and push Tinc container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tinc
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-tahoe-introducer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-introducer
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/earthgrid-tahoe-introducer
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            latest

      - name: Build and push Tahoe Introducer container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-introducer
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-introducer.outputs.tags }}
          labels: ${{ steps.meta-introducer.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-tahoe-storage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-storage
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/earthgrid-tahoe-storage
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            latest

      - name: Build and push Tahoe Storage container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-storage
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-storage.outputs.tags }}
          labels: ${{ steps.meta-storage.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-tahoe-client:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-client
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/earthgrid-tahoe-client
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            latest

      - name: Build and push Tahoe Client container
        uses: docker/build-push-action@v4
        with:
          context: ./v2/Docker/earthgrid-tahoe-client
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Note: UI container will be added in a future update when the directory exists