#!/bin/bash
# Simplified sync-introducer-furl.sh for testing purposes
# This script avoids using grep -P which is not supported in Alpine/BusyBox

set -e

# Configuration
NODE_NAME="${NODE_NAME:-node1}"
MANIFEST_DIR="${MANIFEST_DIR:-/var/lib/earthgrid/manifest}"
MANIFEST_FILE="${MANIFEST_DIR}/manifest.yaml"
LOG_FILE="/var/log/earthgrid/furl-sync.log"
INTRODUCER_DIR="/var/lib/tahoe-introducer"
FURL_CACHE_FILE="/var/lib/earthgrid/introducer_furl.cache"
DEBUG="${DEBUG:-false}"

# Configure logging
mkdir -p "$(dirname "$LOG_FILE")"
exec > >(tee -a "$LOG_FILE") 2>&1

log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

log_debug() {
  if [ "$DEBUG" = "true" ]; then
    log "[DEBUG] $1"
  fi
}

error() {
  log "[ERROR] $1"
  return 1
}

# Create needed directories
mkdir -p "$(dirname "$FURL_CACHE_FILE")"

# For testing purposes, hardcode the node role
get_node_roles() {
  echo "tahoe_introducer"
}

# For testing purposes, always return that the node has the role
has_role() {
  local role="$1"
  if [ "$role" = "tahoe_introducer" ]; then
    return 0
  else
    return 1
  fi
}

# Extract FURL from introducer.furl
extract_introducer_furl() {
  local furl_file="$INTRODUCER_DIR/private/introducer.furl"
  if [ -f "$furl_file" ]; then
    cat "$furl_file"
    return 0
  else
    error "Could not find introducer.furl file"
    return 1
  fi
}

# Update manifest with FURL
update_manifest_furl() {
  local furl="$1"
  
  if [ -z "$furl" ]; then
    error "No FURL provided to update manifest"
    return 1
  fi
  
  if [ ! -f "$MANIFEST_FILE" ]; then
    error "Manifest file not found: $MANIFEST_FILE"
    return 1
  fi
  
  log "Updating manifest with introducer FURL"
  
  # Check if introducer_furl line exists in manifest
  if grep -q "^introducer_furl:" "$MANIFEST_FILE"; then
    # Update existing line (compatible with BusyBox sed)
    sed -i "s|^introducer_furl:.*$|introducer_furl: $furl|" "$MANIFEST_FILE"
  else
    # Add to end of file for simplicity in testing
    echo "introducer_furl: $furl" >> "$MANIFEST_FILE"
  fi
  
  log "Manifest updated with FURL: $furl"
  return 0
}

# Publish FURL from introducer
publish_introducer_furl() {
  log "Publishing introducer FURL from node $NODE_NAME"
  
  local furl
  furl=$(extract_introducer_furl)
  if [ -z "$furl" ]; then
    error "Could not extract introducer FURL"
    return 1
  fi
  
  # Cache the FURL locally
  echo "$furl" > "$FURL_CACHE_FILE"
  
  # Update the manifest
  if update_manifest_furl "$furl"; then
    log "Successfully published introducer FURL to manifest"
    return 0
  else
    error "Failed to publish introducer FURL to manifest"
    return 1
  fi
}

# Main function to synchronize FURL based on node role
sync_introducer_furl() {
  log "Starting introducer FURL synchronization for node $NODE_NAME"
  
  # Hardcoded for testing - always publish FURL
  log "This is a test introducer node. Publishing FURL to manifest."
  publish_introducer_furl
}

# Execute FURL synchronization
sync_introducer_furl
exit $?